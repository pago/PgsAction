/*
 * Copyright 2005 Patrick Gotthardt
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pagosoft.swing;

import javax.swing.event.*;
import javax.swing.*;

/**
 * <p>This class binds a ListModel to a JComponent, removing and adding
 * components that have been generated by the specified ComponentProvider
 * when the model changes.</p>
 *
 * <p>Install it through the static {@link #install}-method.</p>
 *
 * @author Patrick Gotthardt
 */
public class ListModelBinder implements ListDataListener {
	private JComponent component;
	private ComponentProvider provider;
	private ListModel model;

	protected ListModelBinder(JComponent component, ListModel model, ComponentProvider provider) {
		this.component = component;
		this.provider = provider;
		this.model = model;

		model.addListDataListener(this);

		if(model.getSize() > 0) {
			intervalAdded(new ListDataEvent(model, ListDataEvent.INTERVAL_ADDED, 0, model.getSize()));
		}
	}

	public void intervalAdded(ListDataEvent e) {
		if(e.getIndex0() == e.getIndex1() && e.getIndex0() > -1) {
			component.add(provider.createComponent(model.getElementAt(e.getIndex0())), e.getIndex0());
		} else {
			for(int i = e.getIndex0(); i < e.getIndex1(); i++) {
				component.add(provider.createComponent(model.getElementAt(i)), i);
			}
		}
	}

	public void intervalRemoved(ListDataEvent e) {
		if(e.getIndex0() == e.getIndex1() && e.getIndex0() > -1) {
			component.remove(e.getIndex0());
		} else {
			for(int i = e.getIndex1()-1; i >= e.getIndex0(); i--) {
				component.remove(i);
			}
		}
	}

	public void contentsChanged(ListDataEvent e) {
		component.removeAll();
		intervalAdded(new ListDataEvent(model, ListDataEvent.INTERVAL_ADDED, 0, model.getSize()));
	}

	/**
	 * Installs the ListModelBinder as a listener of the ListModel and generates the
	 * view.
	 *
	 * @param component The target component that should be updated with the model.
	 * @param model The model that is supposed to be observed.
	 * @param provider The component provider that'll be used to generate the components.
	 */
	public static void install(JComponent component, ListModel model, ComponentProvider provider) {
		new ListModelBinder(component, model, provider);
	}
}